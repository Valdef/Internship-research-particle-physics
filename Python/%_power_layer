import uproot
import matplotlib.pyplot as plt
import numpy as np 
import tqdm

# --- variable to change ----
threshold_1 = 75    # 75%
threshold_2 = 90    # 90%

# ----- open root file and get tree ------
root_file = "/shared/physics/physdata/nuclear/ePIC_EIC/vd613/Internship/GEANT4/output/B4_latest.root"    #directory of root file 
file = uproot.open(root_file)
df = file["B4_SpacialData;1"].arrays(library = "pd")

# --- get variable ----
Z = df['Z'] 
Edep = df['Edep']

# ----- make Z being sorted, start at 0 and be integer ------
Z = np.sort(Z)/9
layer = (Z - Z[0]).astype(int)

# ----- get the percentage -----
Edep_per_layer = df.groupby(layer)['Edep'].sum()   # add Edep for each layers.
total_Edep = Edep.sum()
cumsum = Edep.cumsum()
percent = cumsum / total_Edep *100

hist, bins = np.histogram(layer, bins=100, weights=Edep)    # create histogram
hist_percentage = (hist / hist.sum()) * 100        # find percentage 

# ---- plot the histogram percent of Edep per layer -----
plt.figure(1)
plt.bar(bins[:-1], hist_percentage, width=np.diff(bins), edgecolor='black', align='edge')
plt.xlabel('Number of layers')
plt.ylabel('Percentage of Edep')
plt.title('Percentage of Edep per layer')
plt.grid(True)

# ------ calculate threshold -------
threshold_75 = np.argmax(percent >=threshold_1)
Z_75 = layer[threshold_75]   # find index for 75%
print('Number of layer for 75% is ', Z_75)

threshold_90 = np.argmax(percent >=threshold_2)
Z_90 = layer[threshold_90]  # find index for 90%
print('Number of layer for 90% is ', Z_90)

# ------- plot cumultative graph Edep per layer ------
plt.figure(2)
plt.plot(layer, percent, marker='.', linestyle='none')
plt.xlabel('Number of layers')
plt.ylabel('Percentage of Edep absorbed')
plt.title('Percentage of Edep absorbed per layers')
plt.grid(True)

# ------ Get the line for threshold -----
plt.axhline(y=75, color='b', linestyle = '-')
plt.axvline(x=Z_75, color='b', linestyle = '-')
plt.axhline(y=90, color='r', linestyle = '-')
plt.axvline(x=Z_90, color='r', linestyle = '-')

plt.show()


'''
threshold_1 = 75
threshold_2 = 90

# ---- open the root file and extract data ------
root_file = "/shared/physics/physdata/nuclear/ePIC_EIC/vd613/Internship/GEANT4/output/B4_latest.root"    #directory of root file 

file = uproot.open(root_file)
df = file["B4_SpacialData;1"].arrays(library = "pd")
Z = df['Z']
Edep = df['Edep']

# ----- process data for graph ------
Z_sorted = np.sort(Z)/9 # sort Z and make it by layer
Z_sorted = Z_sorted - Z_sorted[0]   # shift for the graph to start at 0
culmutative_percentage = np.arange(1, len(Z_sorted) + 1) / len(Z_sorted) * 100  # find the percentage

# ----- find the x value for different threshold ------
threshold_75 = np.argmax(culmutative_percentage >=threshold_1)
Z_75 = Z_sorted[threshold_75]   # find index for 75%
print('Number of layer for 75% is ', Z_75)

threshold_90 = np.argmax(culmutative_percentage >=threshold_2)
Z_90 = Z_sorted[threshold_90]  # find index for 90%
print('Number of layer for 90% is ', Z_90)

plt.figure(1)
plt.plot(Z_sorted, culmutative_percentage, marker='.', linestyle='none')
plt.xlabel('Number of layers')
plt.ylabel('Percentage of hit absorbed')
plt.title('Percentage of hits absorbed per layers')
plt.grid(True)

plt.axhline(y=75, color='b', linestyle = '-')
plt.axvline(x=Z_75, color='b', linestyle = '-')
plt.axhline(y=90, color='r', linestyle = '-')
plt.axvline(x=Z_90, color='r', linestyle = '-')


hist, bins = np.histogram(Z_sorted, bins=100, weights=Edep)
hist_percentage = (hist / hist.sum()) * 100

plt.figure(2)
plt.bar(bins[:-1], hist_percentage, width=np.diff(bins), edgecolor='black', align='edge')
plt.xlabel('Number of layers')
plt.ylabel('Percentage of hits')
plt.title('Percentage of hits per layer')
plt.grid(True)
plt.show()


df['Z_int'] = df['Z'].astype(int)
dataframe = df.groupby('Z_int')['Edep'].sum().reset_index()

hist, bins = np.histogram(dataframe['Z_int'], bins=100, weights=dataframe['Edep'])
hist_percentage = (hist / hist.sum()) * 100

plt.figure(3)
plt.bar(bins[:-1], hist_percentage, width=np.diff(bins), edgecolor='black', align='edge')
plt.xlabel('Number of layers')
plt.ylabel('Percentage of hits')
plt.title('Percentage of hits per layer')
plt.grid(True)
plt.show()'''